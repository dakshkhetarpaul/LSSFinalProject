%2.1a
picture = imread("WeeksHallSmall.jpg");

imshow(picture);
\\printnothing
grayimage = rgb2gray(picture);

imshow(grayimage);

grayimage  = double(grayimage);
grayimage2  = double(grayimage);

avgIntensity = mean(grayimage(:));


%2.1b

% Assuming 'grayimage' is your input grayscale image matrix

% Define M values
M_values = [2, 4, 8, 16, 32];

% Loop over each M value
for M = M_values
    % Create the averaging filter (box filter) kernel
    h = ones(1, M) / M;
    v = ones(M, 1) / M;

    % Initialize images for storing results
    blurred_rows = zeros(size(grayimage));
    blurred_columns = zeros(size(grayimage));

    % Blur rows
    for i = 1:size(grayimage, 1)
        row = conv(grayimage(i, :), h, 'same');
        blurred_rows(i, :) = row;
    end
    
    % Save the image with blurred rows
    imwrite(uint8(blurred_rows), sprintf('blurred_rows_M%d.jpg', M));
    
    % Now, blur columns using the previously blurred row image
    for j = 1:size(grayimage2, 2)
        col = conv(blurred_rows(:, j), v, 'same');
        blurred_columns(:, j) = col;
    end
    
    % Save the image with blurred columns
    imwrite(uint8(blurred_columns), sprintf('blurred_columns_M%d.jpg', M));
end


%2.1c
row_index = round(size(grayimage, 1) / 2);
selected_row = grayimage(row_index, :);
figure;
stem(selected_row);
title('Pixel Intensity Values of the Center Row');

c = [1,-1];
filtered_row = conv(selected_row, c, 'same');
figure;
stem(filtered_row);
title('Filtered Signal of the Selected Row');

c = [1, -1];

% Initialize matrices to store the convolution results
filtered_rows = zeros(size(grayimage));
filtered_cols = zeros(size(grayimage));

% Convolve the filter with each row
for i = 1:size(grayimage, 1)
    filtered_rows(i, :) = conv(grayimage(i, :), c, 'same');
end

for j = 1:size(grayimage, 2)
    filtered_columns(:, j) = grayimage(:, j);
end



imagesc(grayimage)

%Testing With Threshold

threshold_value = 10;


binary_edge_image = abs(filtered_rows) > threshold_value;


imagesc(binary_edge_image)

%2.3prep

bird = imread("skybird.jpg");
graybird = rgb2gray(bird);
imshow(graybird);

%2.3a
% Define the range for n
n_g0 = 0:7;
n_h0 = 0:100; % Assuming after 100, the terms are negligible

% Define g0[n] and h0[n]
g0 = @(n) 8 - n;
u = @(n) double(n >= 0); % Unit step function
h0 = @(n) (0.95).^n .* (u(n) - u(n - 8));

% Compute the energy of g0[n]
E_g0 = sum(g0(n_g0).^2);

% Compute the energy of h0[n]
E_h0 = sum(h0(n_h0).^2);

% Compute gamma and eta
gamma = sqrt(1 / E_g0);
eta = sqrt(1 / E_h0);

% Display the results
fprintf('Gamma: %f\n', gamma);
fprintf('Eta: %f\n', eta);

% Plot the impulse responses g[n] and h[n]
n_g = n_g0; % Same range as g0[n]
n_h = n_h0; % Same range as h0[n]

g = gamma * g0(n_g);
h = eta * h0(n_h);

% Plot g[n]
figure;
stem(n_g, g);
title('Normalized Impulse Response g[n]');
xlabel('n');
ylabel('g[n]');

% Plot h[n]
figure;
stem(n_h, h);
title('Normalized Impulse Response h[n]');
xlabel('n');
ylabel('h[n]');

%2.3b
% Define the normalized impulse responses g[n] and h[n]
n_g = 0:7;
n_h = 0:100; % You might need to adjust this range appropriately

g_n = gamma * g0(n_g);
h_n = eta * h0(n_h);

% Number of points for frequency response
num_points = 512;

% Compute frequency response for g[n]
[Hg, Wg] = freqz(g_n, 1, num_points);

% Compute frequency response for h[n]
[Hh, Wh] = freqz(h_n, 1, num_points);

% Plot magnitude and phase for g[n]
figure;
subplot(2,1,1);
plot(Wg/pi, 20*log10(abs(Hg))); % Magnitude in dB
title('Magnitude Response of G(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Magnitude (dB)');

subplot(2,1,2);
plot(Wg/pi, angle(Hg)); % Phase in radians
title('Phase Response of G(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Phase (radians)');

% Plot magnitude and phase for h[n]
figure;
subplot(2,1,1);
plot(Wh/pi, 20*log10(abs(Hh))); % Magnitude in dB
title('Magnitude Response of H(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Magnitude (dB)');

subplot(2,1,2);
plot(Wh/pi, angle(Hh)); % Phase in radians
title('Phase Response of H(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Phase (radians)');

