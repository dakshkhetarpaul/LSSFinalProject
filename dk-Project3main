%2.1a

picture = imread("WeeksHallSmall.jpg");

imshow(picture);

grayimage = rgb2gray(picture);

imshow(grayimage);

doubledgrayimage = double(grayimage);

[rows, cols] = size(doubledgrayimage);


average = mean(doubledgrayimage(:)); 




%2.1b

% Define M values
M_values = [2, 4, 8, 16, 32];

% Pre-allocate array to store blurred images for different M values
blurred_images = cell(size(M_values));

% Apply the filter for each M
for i = 1:length(M_values)
    M = M_values(i);

    % Create the averaging filter (box filter) kernel
    h = ones(1, M) / M;

    % Apply the filter to each row
    blurred_rows = filter(h, 1, grayimage, [], 2);

    % Apply the filter to each column
    blurred_image = filter(h, 1, blurred_rows, [], 1);

    % Store the blurred image
    blurred_images{i} = blurred_image;

    % Display the blurred image using imagesc or imshow
    figure;
    imshow(uint8(blurred_image));
    title(['Blurred with M = ', num2str(M)]);
end


%2.1c

row_index = round(size(grayimage, 1) / 2);
selected_row = grayimage(row_index, :);
figure;
stem(selected_row);
title('Pixel Intensity Values of the Center Row');
xlabel('Rows');
ylabel('Intensity')


c = [1,-1];
filtered_row = conv(selected_row, c, 'same');
figure;
stem(filtered_row);
title('Filtered Signal of the Selected Row');
xlabel('Rows');
ylabel('Intensity')

c = [1, -1];

% Initialize matrices to store the convolution results
% filtered_rows = zeros(size(grayimage));
filtered_cols = zeros(size(grayimage));

% Convolve the filter with each row
for i = 1:size(grayimage, 1)
    filtered_rows(i, :) = conv(grayimage(i, :), c, 'same');
end

% Convolve the filter with each column
for j = 1:size(grayimage, 2)
    filtered_cols(:, j) = grayimage(:, j);
end

threshold_value = 9;  % Adjust this value based on your specific image

% Apply thresholding to the row-filtered image
binary_edge_image = abs(filtered_rows) > threshold_value;


imagesc(grayimage)
imagesc(binary_edge_image);


%Testing stuff
c = [1, -1];

% Initialize matrices to store the convolution results
filtered_rows = zeros(size(grayimage));
filtered_cols = zeros(size(grayimage));

% Convolve the filter with each row
for i = 1:size(grayimage, 1)
    filtered_rows(i, :) = conv(grayimage(i, :), c, 'same');
end

% Convolve the filter with each column
for j = 1:size(grayimage, 2)
    filtered_cols(:, j) = grayimage(:, j);
end






%2.1d


% Define the filter Dur
Dur = [0 0 -1; 0 1 0; 0 0 0];

% Convolve Dur with the image using conv2
convolved_image = conv2(double(grayimage), Dur, 'same');

% Threshold the output to reveal diagonal edges
threshold_value = 10; % Adjust this value based on your specific image and requirements
binary_diagonal_edges = convolved_image > threshold_value;

% Display the original image, convolved image, and binary diagonal edges
figure;
subplot(1, 3, 1);
imshow(grayimage);
title('Original Image');

subplot(1, 3, 2);
imagesc(convolved_image);
title('Convolved Image');

subplot(1, 3, 3);
imagesc(binary_diagonal_edges);
title('Binary Diagonal Edges');

colormap(gray); % Use a grayscale colormap for better visualization


%2.1d

Dul = [-1 0 0; 0 1 0; 0 0 0];


threshold_value = 10;
convolvedDur = conv2(double(grayimage), Dul, 'same');

Dur_diagonal_edges = convolvedDur > threshold_value;

% Display the original image, convolved image, and binary diagonal edges
figure;
subplot(1, 3, 1);
imshow(grayimage);
title('Original Image');

subplot(1, 3, 2);
imagesc(convolvedDur);
title('Convolved Dur');

subplot(1, 3, 3);
imagesc(Dur_diagonal_edges);
title('Binary Diagonal Edges for Dur');

colormap(gray); % Use a grayscale colormap for better visualization





%2.1e

Dnew = [0, 0, 0, 0, 0;
     0, 0, 0, 0, 0;
     0, -1, 0, 0, 0;
     0, 0, 1, 0, 0;
     0, 0, 0, 0, 0];

threshold_value = 6;
convolvedNew = conv2(double(grayimage), Dnew, 'same');

Dnew_edges = convolvedNew > threshold_value;

% Display the original image, convolved image, and binary diagonal edges
figure;
subplot(1, 3, 1);
imshow(grayimage);
title('Original Image');

subplot(1, 3, 2);
imagesc(convolvedNew);
title('Convolved New');

subplot(1, 3, 3);
imagesc(Dnew_edges);
title('5x5 matrix image');

colormap(gray); % Use a grayscale colormap for better visualization


%2.2a

%dwt stuff
newgrayimage = rgb2gray(picture);

[cA, cH, cV, cD] = dwt2(newgrayimage, 'haar');

figure;

subplot(2, 2, 1);
imagesc(cA);
colormap gray;
title('cA');

subplot(2, 2, 2);
imagesc(cH);
colormap gray;
title('cH');

subplot(2, 2, 3);
imagesc(cV);
colormap gray;
title('cV');

subplot(2, 2, 4);
imagesc(cD);
colormap gray;
title('cD');

% Obtain filter coefficients using wfilters
[lowpass, highpass] = wfilters('haar');

% Display impulse response of the lowpass filter
figure;
subplot(2, 1, 1);
stem(lowpass);
title('Impulse Response of Lowpass Filter');
xlabel('Sample Index');
ylabel('Amplitude');

% Display impulse response of the highpass filter
subplot(2, 1, 2);
stem(highpass);
title('Impulse Response of Highpass Filter');
xlabel('Sample Index');
ylabel('Amplitude');

% Calculate energy in the impulse response
energy_lowpass = sum(abs(lowpass).^2);
energy_highpass = sum(abs(highpass).^2);

fprintf('Energy in Lowpass Filter: %f\n', energy_lowpass);
fprintf('Energy in Highpass Filter: %f\n', energy_highpass);

% Explanation of energy choice
disp('Choosing energy in the impulse response makes sense because it reflects the overall power or strength of the filter. A higher energy value indicates a more powerful filter, capable of capturing and preserving more information. In the context of signal processing, filters with higher energy in their impulse response are often preferred as they can better represent and retain important features of the signal.');



%2.2b 

% Assuming cA, cH, cV, cD are obtained from the wavelet transform
reconstructed_image = idwt2(cA, cH, cV, cD, 'haar', size(newgrayimage));

% Display the reconstructed image
figure;
imshow(uint8(reconstructed_image));
title('Reconstructed Image');

% Calculate the difference between the reconstructed image and the original
difference_image = double(newgrayimage) - double(reconstructed_image);

% Display the difference image
figure;
imshow(uint8(abs(difference_image)));
title('Absolute Difference Image');

% Calculate the total squared error per pixel
squared_error_per_pixel = sum(difference_image(:).^2) / numel(newgrayimage);
fprintf('Total Squared Error per Pixel: %.2f\n', squared_error_per_pixel);

% Calculate the maximum absolute difference
max_absolute_difference = max(abs(difference_image(:)));
fprintf('Maximum Absolute Difference: %.2f\n', max_absolute_difference);

% Find the entry in D with the maximum value
[max_value, max_index] = max(difference_image(:));
[row, col] = ind2sub(size(difference_image), max_index);
fprintf('Coordinates of Maximum Value: Row %d, Column %d\n', row, col);
fprintf('Maximum Value: %.2f\n', max_value);





%2.2c

% Sizes of the matrices
original_size = numel(newgrayimage);
approximation_size = numel(cA);

% Compression ratio
compression_ratio = original_size / approximation_size;

fprintf('Original Size: %d\n', original_size);
fprintf('Approximation Size: %d\n', approximation_size);
fprintf('Compression Ratio: %.2f\n', compression_ratio);

%2.2d
lowdetail = dwt2(newgrayimage, 'haar'); %Zeroed out edges, "low detailed image"
imshow(uint8(lowdetail));
title('low detailed image')

% Run idwt2 on the approximation matrix and three all-zero matrices for the detail matrices
reconstructed_image = idwt2(lowdetail, zeros(size(lowdetail)), zeros(size(lowdetail)), zeros(size(lowdetail)), 'haar', size(newgrayimage));

% Display the reconstructed image
figure;
imshow(uint8(reconstructed_image));
title('Reconstructed Image');

% Calculate the difference between the reconstructed image and the original
difference_image = double(newgrayimage) - double(reconstructed_image);

% Display the difference image using a threshold of Ï„ = 10
threshold = 10;
thresholded_difference = abs(difference_image) > threshold;
figure;
imshow(thresholded_difference);
title('Thresholded Difference Image');

% Calculate squared error per pixel
squared_error_per_pixel = sum(difference_image(:).^2) / numel(newgrayimage);
fprintf('Total Squared Error per Pixel: %.2f\n', squared_error_per_pixel);

% Calculate the maximum absolute difference
max_absolute_difference = max(abs(difference_image(:)));
fprintf('Maximum Absolute Difference: %.2f\n', max_absolute_difference);


%2.3prep

bird = imread("skybird.jpg");
graybird = rgb2gray(bird);
imshow(graybird);

%2.3a
% Define the range for n
n_g0 = 0:7;
n_h0 = 0:100; % Assuming after 100, the terms are negligible

% Define g0[n] and h0[n]
g0 = @(n) 8 - n;
u = @(n) double(n >= 0); % Unit step function
h0 = @(n) (0.95).^n .* (u(n) - u(n - 8));

% Compute the energy of g0[n]
E_g0 = sum(g0(n_g0).^2);

% Compute the energy of h0[n]
E_h0 = sum(h0(n_h0).^2);

% Compute gamma and eta
gamma = sqrt(1 / E_g0);
eta = sqrt(1 / E_h0);

% Display the results
fprintf('Gamma: %f\n', gamma);
fprintf('Eta: %f\n', eta);

% Plot the impulse responses g[n] and h[n]
n_g = n_g0; % Same range as g0[n]
n_h = n_h0; % Same range as h0[n]

g = gamma * g0(n_g);
h = eta * h0(n_h);

% Plot g[n]
figure;
stem(n_g, g);
title('Normalized Impulse Response g[n]');
xlabel('n');
ylabel('g[n]');

% Plot h[n]
figure;
stem(n_h, h);
title('Normalized Impulse Response h[n]');
xlabel('n');
ylabel('h[n]');


%2.3b
% Define the normalized impulse responses g[n] and h[n]
n_g = 0:7;
n_h = 0:100; % You might need to adjust this range appropriately

g_n = gamma * g0(n_g);
h_n = eta * h0(n_h);

% Number of points for frequency response
num_points = 512;

% Compute frequency response for g[n]
[Hg, Wg] = freqz(g_n, 1, num_points);

% Compute frequency response for h[n]
[Hh, Wh] = freqz(h_n, 1, num_points);

% Plot magnitude and phase for g[n]
figure;
subplot(2,1,1);
plot(Wg/pi, 20*log10(abs(Hg))); % Magnitude in dB
title('Magnitude Response of G(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Magnitude (dB)');

subplot(2,1,2);
plot(Wg/pi, angle(Hg)); % Phase in radians
title('Phase Response of G(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Phase (radians)');

% Plot magnitude and phase for h[n]
figure;
subplot(2,1,1);
plot(Wh/pi, 20*log10(abs(Hh))); % Magnitude in dB
title('Magnitude Response of H(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Magnitude (dB)');

subplot(2,1,2);
plot(Wh/pi, angle(Hh)); % Phase in radians
title('Phase Response of H(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Phase (radians)');

%2.3c

% Assuming you have the Image Processing Toolbox
image = imread('skybird.JPG');
gray_image = rgb2gray(image);

% Define the range for n
n_g0 = 0:7;
n_h0 = 0:7; % Since h0[n] is defined from 0 to 7

% Define g0[n] and h0[n]
g0_filter = g0(n_g0);
h0_filter = h0(n_h0);

% Compute the energy of g0[n]
E_g0 = sum(g0_filter.^2);

% Compute the energy of h0[n]
E_h0 = sum(h0_filter.^2);

% Compute gamma and eta
gamma = sqrt(1 / E_g0);
eta = sqrt(1 / E_h0);

% Define and apply filters
g_filter = gamma * g0_filter;
h_filter = eta * h0_filter;

% Apply the filters to each row
blurred_image_g = conv2(double(gray_image), g_filter, 'same');
blurred_image_h = conv2(double(gray_image), h_filter, 'same');

% Display the results
figure;
subplot(1, 3, 1);
imshow(gray_image);
title('Original Image');

subplot(1, 3, 2);
imshow(uint8(blurred_image_g));
title('Blurred with g[n]');

subplot(1, 3, 3);
imshow(uint8(blurred_image_h));
title('Blurred with h[n]');

%2.3d

b_g = g_n; % Numerator coefficients (impulse response of g[n])
a_g = 1;   % Denominator coefficient (since it is an FIR filter)

b_h = h_n; % Numerator coefficients (impulse response of h[n])
a_h = 1;   % Denominator coefficient (since it is an FIR filter)

% The 'filter' function is used for filtering signals, not for creating filter objects
% Instead, we will use 'tf' to create transfer function models, which can be used with pzplot

% Create transfer function models
sys_g = tf(b_g, a_g);
sys_h = tf(b_h, a_h);

% Plot the pole-zero diagram for g[n]
figure;
pzplot(sys_g);
title('Pole-Zero Plot for g[n]');

% Plot the pole-zero diagram for h[n]
figure;
pzplot(sys_h);
title('Pole-Zero Plot for h[n]');

% If you want to use pzmap instead, which shows a map of poles and zeros
% in the complex plane without the unit circle, use the following:

% Pole-Zero map for g[n]
%figure;
%pzmap(sys_g);
%title('Pole-Zero Map for g[n]');

% Pole-Zero map for h[n]
%figure;
%pzmap(sys_h);
%title('Pole-Zero Map for h[n]');

%2.3e


% Number of points for the DTFT
N = 512;

% Compute the DTFT for the inverse of g[n]
[InvHg, Wg] = freqz(1, b_g, N); % Note the switch in numerator and denominator for the inverse

% Compute the DTFT for the inverse of h[n]
[InvHh, Wh] = freqz(1, b_h, N); % Note the switch in numerator and denominator for the inverse

% Plot magnitude and phase for the inverse of g[n]
figure;
subplot(2,1,1);
plot(Wg/pi, 20*log10(abs(InvHg))); % Magnitude in dB
title('Magnitude Response of Inverse G(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Magnitude (dB)');

subplot(2,1,2);
plot(Wg/pi, unwrap(angle(InvHg))); % Phase in radians
title('Phase Response of Inverse G(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Phase (radians)');

% Plot magnitude and phase for the inverse of h[n]
figure;
subplot(2,1,1);
plot(Wh/pi, 20*log10(abs(InvHh))); % Magnitude in dB
title('Magnitude Response of Inverse H(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Magnitude (dB)');

subplot(2,1,2);
plot(Wh/pi, unwrap(angle(InvHh))); % Phase in radians
title('Phase Response of Inverse H(e^{j\omega})');
xlabel('Normalized Frequency (\times\pi rad/sample)');
ylabel('Phase (radians)');

%2.3f

recovered_image_g = filter(1, b_g, blurred_image_g);

% Apply the inverse filter for h[n]
recovered_image_h = filter(1, b_h, blurred_image_h);

% Display the results
figure;
subplot(1, 2, 1);
imshow(uint8(recovered_image_g));
title('Image using Inverse of g[n]');

subplot(1, 2, 2);
imshow(uint8(recovered_image_h));
title('Image using Inverse of h[n]');

%2.3g

% Assuming you have the Image Processing Toolbox
image = imread('skybird.JPG');
gray_image = rgb2gray(image);

% Apply the inverse filter for h[n]
recovered_image_h = filter(1, b_h, blurred_image_h);

% Define the inverse filter coefficients for the IIR filter
a_bar_h = [1 -0.95 zeros(1, 99)];  % Assuming the IIR filter has 100 coefficients

% Apply the inverse filter for the IIR filter
recovered_image_bar_h = filter(1, a_bar_h, blurred_image_h);

% Display the results
figure;
subplot(1, 3, 1);
imshow(uint8(recovered_image_h));
title('Image using Inverse of h[n]');

subplot(1, 3, 2);
imshow(uint8(recovered_image_bar_h));
title('Image using Inverse of \bar{h}[n]');

% Experiment with different values of AMIN and AMAX
amin_values = [0, 50, 100];
amax_values = [150, 200, 255];

subplot(1, 3, 3);
for i = 1:numel(amin_values)
    for j = 1:numel(amax_values)
        recovered_image_bar_h_adjusted = mat2gray(recovered_image_bar_h, [amin_values(i), amax_values(j)]);
        imshow(recovered_image_bar_h_adjusted);
        title(['Adjusted: AMIN=', num2str(amin_values(i)), ', AMAX=', num2str(amax_values(j))]);
        pause(1);  % Pause for a moment to observe each adjustment
    end
end
%2.3e2

orig_image = imread('skybird.jpg');
grayscale = rgb2gray(orig_image);
blurred = zeros(size(grayscale));
[rows, cols] = size(grayscale);
row_one = zeros(1, 1024);
windowSize = 5;
bw = (1 / windowSize) * (1 : windowSize);
a = 1;
b = 0.436244706 * 0.95.^(0:7);
for row_index = 1:rows
    row = grayscale(row_index, :);
    row = filter(b, a, row);
    blurred(row_index, :) = row(1, :);
end
deblurred = zeros(size(grayscale));
for row_index = 1:rows
    row = blurred(row_index, :);
    row = filter([1 -0.95], 0.31224312, row);
    deblurred(row_index, :) = row(1, :);
end
figure("Name", "Deblurred image")
imshow(deblurred, [0, 1])
figure("Name", "Deblurred image")
imshow(deblurred, [0.3, 0.8])
figure("Name", "Contrast histrogram")
histogram = reshape(deblurred, [1, rows * cols]);
hist(histogram, 0:0.01:1);
title("Histogram for deblurred grayscale")
xlabel("Intensity level");
ylabel("Frequency of luminance")
